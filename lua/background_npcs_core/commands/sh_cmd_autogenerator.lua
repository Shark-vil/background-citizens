local scommand = slib.Components.GlobalCommand
local snet = slib.Components.Network
local BGN_NODE = BGN_NODE
local math = math
local CLIENT = CLIENT
local Vector = Vector
local math_Round = math.Round
--
local LagTriggerDefault = 0.001
local LagTrigger = LagTriggerDefault
local FirstTickTime = SysTime()
local EndTickTime = SysTime()

local function LagFixationStart()
	FirstTickTime = SysTime()
end

local function LagFixationEnd(yield)
	EndTickTime = SysTime()

	if LagTrigger < LagTriggerDefault then LagTrigger = LagTriggerDefault end

	if EndTickTime - FirstTickTime > LagTrigger then
		LagTrigger = 0
		yield()
	else
		if LagTrigger + LagTriggerDefault <= 0.004 then
			LagTrigger = LagTrigger + LagTriggerDefault
		end
	end
end

local function ConstructParent(node, max_pass, yield)
	local current_pass = 0
	local nodes = BGN_NODE:GetNodeMap()

	for i = #nodes, 1, -1 do
		local anotherNode = nodes[i]
		if anotherNode ~= node then
			local pos = anotherNode:GetPos()

			if not anotherNode:HasParent(node) and node:CheckDistanceLimitToNode(pos)
				and node:CheckHeightLimitToNode(pos) and node:CheckTraceSuccessToNode(pos)
			then
				anotherNode:AddParentNode(node)
				anotherNode:AddLink(node, 'walk')
			end
		end

		current_pass = current_pass + 1
		if current_pass == max_pass then
			current_pass = 0
			yield()
		end
	end
end

scommand.Create('bgn_generate_navmesh').OnServer(function(ply, cmd, args)
	local old_progress = -1

	if async.Exists('bgn_generate_navmesh') then
		async.Remove('bgn_generate_navmesh')
		snet.Invoke('bgn_generate_navmesh_progress_kill', ply)
		snet.Invoke('bgn_generate_navmesh_msg', ply, 'Movement mesh generator stopped')
		return
	end

	if not navmesh.IsLoaded() then return end

	async.Add('bgn_generate_navmesh', function(yield, wait)
		BGN_NODE:ClearNodeMap()

		do
			local navmesh_map = navmesh.GetAllNavAreas()
			local max = #navmesh_map

			snet.Invoke('bgn_generate_navmesh_msg', ply, 'Creating nodes')

			for i = 1, max do
				LagFixationStart()

				local area = navmesh_map[i]
				local pos = area:GetCenter()

				BGN_NODE:AddNodeToMap( BGN_NODE:Instance( pos + Vector(0, 0, 10) ) )

				LagFixationEnd(yield)

				local new_progress = math_Round((i / max) * 100)
				if new_progress ~= old_progress then
					snet.Invoke('bgn_generate_navmesh_progress', ply, new_progress)
					old_progress = new_progress
				end
			end
		end

		yield()

		do
			snet.Invoke('bgn_generate_navmesh_progress_kill', ply)
			snet.Invoke('bgn_generate_navmesh_msg', ply, 'Generation of links')

			local nodes = BGN_NODE:GetNodeMap()
			local max = #nodes

			for i = 1, max do
				LagFixationStart()

				ConstructParent(nodes[i], max_pass, yield)

				LagFixationEnd(yield)

				local new_progress = math_Round((i / max) * 100)
				if new_progress ~= old_progress then
					snet.Invoke('bgn_generate_navmesh_progress', ply, new_progress)
					old_progress = new_progress
				end
			end
		end

		yield()

		do
			snet.Invoke('bgn_generate_navmesh_progress_kill', ply)
			snet.Invoke('bgn_generate_navmesh_msg', ply, 'Removing blank nodes')

			local nodes = BGN_NODE:GetNodeMap()
			local max = #nodes

			for i = max, 1, -1 do
				LagFixationStart()

				local node = nodes[i]
				if #node.parents == 0 then
					node:RemoveFromMap()
				end

				LagFixationEnd(yield)

				local new_progress = math_Round( ( 1 - (i / max) ) * 100)
				if new_progress ~= old_progress then
					snet.Invoke('bgn_generate_navmesh_progress', ply, new_progress, 'Removing blank nodes')
					old_progress = new_progress
				end
			end
		end

		snet.Request('bgn_movement_mesh_load_from_client_cl')
			.BigData(BGN_NODE:MapToJson(), nil, 'Loading mesh from server')
			.Invoke(ply)

		snet.Invoke('bgn_generate_navmesh_progress_kill', ply)

		return yield('stop')
	end)
end).Access( { isAdmin = true } ).Register()

if CLIENT then
	snet.RegisterCallback('bgn_generate_navmesh_progress', function(ply, percent)
		notification.AddProgress('bgn_generate_navmesh', 'Generated by: ' .. percent .. '%', percent / 100)
	end)

	snet.RegisterCallback('bgn_generate_navmesh_msg', function(ply, text)
		notification.AddLegacy(text, NOTIFY_GENERIC, 5)
	end)

	snet.RegisterCallback('bgn_generate_navmesh_progress_kill', function(ply)
		notification.Kill('bgn_generate_navmesh')
	end)

	snet.RegisterCallback('bgn_generate_navmesh_not_exists', function(ply)
		notification.AddLegacy('The map does not have a navigation mesh. Generation is not possible.',
			NOTIFY_ERROR, 4)
	end)
end