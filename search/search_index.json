{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Background NPCs - Documentation","text":"<p>This documentation is for \"Background NPCs\". General information on setting up will be published here, as well as a description of the API for developers.</p>"},{"location":"index.html#pages","title":"Pages","text":""},{"location":"index.html#information","title":"Information","text":"<ul> <li>More maps</li> </ul>"},{"location":"index.html#tutorials","title":"Tutorials","text":"<ul> <li>Change basic configuration (Deprecated, will be removed in the future)</li> <li>Creating Custom NPCs</li> <li>Modification of Existing NPCs</li> </ul>"},{"location":"index.html#classes","title":"Classes","text":"<ul> <li>ACTOR</li> </ul>"},{"location":"classes/actor/index.html","title":"Information","text":""},{"location":"classes/actor/index.html#description","title":"Description","text":"<p>The main object of the actor. This object is an intermediary between the NPC entity. It does not directly change the entities of the NPC, but is a shell for performing operations.</p>"},{"location":"classes/actor/index.html#instantiation","title":"Instantiation","text":"<p>Used to initialize the actor object - Instance</p>"},{"location":"classes/actor/index.html#functions","title":"Functions","text":"<ul> <li>AddEnemy</li> <li>AddTarget</li> <li>CallForHelp</li> <li>CallStateAction</li> <li>ClearSchedule</li> <li>EnemiesCount</li> <li>EnemiesRecalculate</li> <li>GetLastReaction</li> <li>GetNPC</li> <li>GetRandomState</li> <li>IsAlive</li> <li>IsStateDelay</li> <li>RandomState</li> <li>ResetStateDelay</li> <li>SetReaction</li> <li>SetStateDelay</li> <li>SetName</li> <li>GetName</li> </ul>"},{"location":"classes/actor/Instance.html","title":"Instance","text":""},{"location":"classes/actor/Instance.html#server","title":"SERVER","text":"<pre><code>    BGN_ACTOR:Instance(npc, npc_type, custom_uid, not_sync_actor_on_client, not_auto_added_to_list)\n</code></pre>"},{"location":"classes/actor/Instance.html#description","title":"Description","text":"<p>Creates an actor object and associates it with the given NPC.</p>"},{"location":"classes/actor/Instance.html#arguments","title":"Arguments","text":"<ol> <li>npc Entity - The entity of the NPC to bind the.</li> <li>npc_type string - NPC type, set in the config \"sh_npcs.lua\" as a table key.</li> <li>custom_uid number (Optional) - The unique number of the actor. This parameter is used to set the ID that was received from the server.</li> <li>not_sync_actor_on_client boolean (Optional | Default: false) - if the value is set to \"true\", then no information about the actor will be sent to clients.</li> <li>not_auto_added_to_list boolean (Optional | Default: false) - if the value is set to \"true\", then the actor will not be automatically added to the general list of all actors.</li> </ol>"},{"location":"classes/actor/Instance.html#return","title":"Return","text":"<ol> <li>ACTOR_CLASS - New actor object.</li> </ol>"},{"location":"classes/actor/Instance.html#example","title":"Example","text":"<p>The code is executed on the server. In this example, an actor with the \"citizen\" behavior will bind to all NPCs that the player spawns from the spawn menu, after which a message with his unique identifier will be displayed on the console.</p> <pre><code>    hook.Add('PlayerSpawnedNPC', 'BindingActorToNPCFromTheSpawnMenu', function(ply, npc)\n        local actor = BGN_ACTOR:Instance(npc, 'citizen')\n        print('A new actor has been created with ID - ', actor.uid)\n    end)\n</code></pre>"},{"location":"classes/actor/functions/AddEnemy.html","title":"AddEnemy","text":""},{"location":"classes/actor/functions/AddEnemy.html#server","title":"SERVER","text":"<pre><code>    ACTOR:AddEnemy(Entity enemy, string reaction:nil, boolean always_visible:false)\n</code></pre>"},{"location":"classes/actor/functions/AddEnemy.html#description","title":"Description","text":"<p>Sets the reaction of the actor to the event. Used in system computing.</p>"},{"location":"classes/actor/functions/AddEnemy.html#arguments","title":"Arguments","text":"<ol> <li>enemy Entity - Any entity target.</li> <li>reaction string - Actor reaction when adding an enemy. If it is fear, then \"AddEntityRelationship\" will be called internally with the D_FR parameter. Any other value will set the - D_HT parameter.</li> <li>always_visible boolean - If \"true\", then the enemy will not be automatically removed from the list after the expiration of time if lost from sight.</li> </ol>"},{"location":"classes/actor/functions/AddTarget.html","title":"AddTarget","text":""},{"location":"classes/actor/functions/AddTarget.html#server","title":"SERVER","text":"<pre><code>    ACTOR:AddTarget(Entity target)\n</code></pre>"},{"location":"classes/actor/functions/CallForHelp.html","title":"CallForHelp","text":""},{"location":"classes/actor/functions/CallForHelp.html#server","title":"SERVER","text":"<pre><code>    ACTOR:CallForHelp(Entity enemy)\n</code></pre>"},{"location":"classes/actor/functions/CallStateAction.html","title":"CallStateAction","text":""},{"location":"classes/actor/functions/CallStateAction.html#server","title":"SERVER","text":"<pre><code>    ACTOR:CallStateAction(string|nil current_state, string func_name, args ...)\n</code></pre>"},{"location":"classes/actor/functions/CallStateAction.html#return","title":"Return","text":"<ol> <li>any - any result calling state function.</li> </ol>"},{"location":"classes/actor/functions/ClearSchedule.html","title":"ClearSchedule","text":""},{"location":"classes/actor/functions/ClearSchedule.html#server","title":"SERVER","text":"<pre><code>    ACTOR:ClearSchedule()\n</code></pre>"},{"location":"classes/actor/functions/EnemiesCount.html","title":"EnemiesCount","text":""},{"location":"classes/actor/functions/EnemiesCount.html#server","title":"SERVER","text":"<pre><code>    ACTOR:EnemiesCount()\n</code></pre>"},{"location":"classes/actor/functions/EnemiesCount.html#return","title":"Return","text":"<ol> <li>number - enemies count.</li> </ol>"},{"location":"classes/actor/functions/EnemiesRecalculate.html","title":"EnemiesRecalculate","text":""},{"location":"classes/actor/functions/EnemiesRecalculate.html#server","title":"SERVER","text":"<pre><code>    ACTOR:EnemiesRecalculate()\n</code></pre>"},{"location":"classes/actor/functions/GetLastReaction.html","title":"GetLastReaction","text":""},{"location":"classes/actor/functions/GetLastReaction.html#server","title":"SERVER","text":"<pre><code>    ACTOR:GetLastReaction()\n</code></pre>"},{"location":"classes/actor/functions/GetLastReaction.html#description","title":"Description","text":"<p>Gets the last installed reaction. If the reaction has not been set previously, an empty string will be returned.</p>"},{"location":"classes/actor/functions/GetLastReaction.html#return","title":"Return","text":"<ol> <li>string - any reaction (state) name or empty string</li> </ol>"},{"location":"classes/actor/functions/GetLastReaction.html#example","title":"Example","text":"<ul> <li>SetReaction</li> </ul>"},{"location":"classes/actor/functions/GetNPC.html","title":"GetNPC","text":""},{"location":"classes/actor/functions/GetNPC.html#shared","title":"SHARED","text":"<pre><code>    ACTOR:GetNPC()\n</code></pre>"},{"location":"classes/actor/functions/GetNPC.html#description","title":"Description","text":"<p>Returns the NPC entity associated with the actor. Can return \"NULL\".</p>"},{"location":"classes/actor/functions/GetNPC.html#return","title":"Return","text":"<ol> <li>Entity - entity associated with an actor, or NULL</li> </ol>"},{"location":"classes/actor/functions/GetNPC.html#example","title":"Example","text":"<p>Paint the NPC.</p> <pre><code>    local npc_color = Color(10, 52, 261)\n    local actor = bgNPC:GetFirstActorInList()\n    local npc = actor:GetNPC()\n    if not IsValid(npc) then return end\n    npc:SetColor(npc_color)\n</code></pre>"},{"location":"classes/actor/functions/GetName.html","title":"GetName","text":""},{"location":"classes/actor/functions/GetName.html#shared","title":"SHARED","text":"<pre><code>    ACTOR:GetName()\n</code></pre>"},{"location":"classes/actor/functions/GetName.html#description","title":"Description","text":"<p>Gets the name of the actor (not the same as the name in the actor config!). The value is set with - SetName</p>"},{"location":"classes/actor/functions/GetName.html#return","title":"Return","text":"<ol> <li>string - Actor name</li> </ol>"},{"location":"classes/actor/functions/GetRandomState.html","title":"GetRandomState","text":""},{"location":"classes/actor/functions/GetRandomState.html#shared","title":"SHARED","text":"<pre><code>    ACTOR:GetRandomState()\n</code></pre>"},{"location":"classes/actor/functions/GetRandomState.html#description","title":"Description","text":"<p>Gets a random actor state.</p> <p>Attention! The state \"none\" is considered systemic, and means the absence of a state. It is recommended to add a check for the \"none\" state if you are going to use this method.</p>"},{"location":"classes/actor/functions/GetRandomState.html#return","title":"Return","text":"<ol> <li>string - any state name or \"none\" string</li> </ol>"},{"location":"classes/actor/functions/GetRandomState.html#example","title":"Example","text":"<pre><code>    local actor = bgNPC:GetFirstActorInList()\n    local new_state = actor:GetRandomState()\n    if new_state == \"none\" then return end\n    actor:SetState(new_state)\n</code></pre>"},{"location":"classes/actor/functions/IsAlive.html","title":"IsAlive","text":""},{"location":"classes/actor/functions/IsAlive.html#shared","title":"SHARED","text":"<pre><code>    ACTOR:IsAlive()\n</code></pre>"},{"location":"classes/actor/functions/IsAlive.html#description","title":"Description","text":"<p>Checks if the NPC who is attached to the actor is alive. Calling this check on the server will automatically remove the actor if the NPC is dead.</p>"},{"location":"classes/actor/functions/IsAlive.html#return","title":"Return","text":"<ol> <li>boolean - will return true if the actor is alive.</li> </ol>"},{"location":"classes/actor/functions/IsAlive.html#example","title":"Example","text":"<pre><code>    local actor = bgNPC:GetFirstActorInList()\n    if not actor:IsAlive() then return end\n    local npc = actor:GetNPC()\n    npc:SetHealth(100)\n</code></pre>"},{"location":"classes/actor/functions/IsStateDelay.html","title":"IsStateDelay","text":""},{"location":"classes/actor/functions/IsStateDelay.html#server","title":"SERVER","text":"<pre><code>    ACTOR:IsStateDelay()\n</code></pre>"},{"location":"classes/actor/functions/IsStateDelay.html#description","title":"Description","text":"<p>Checks if the delay is currently active.</p>"},{"location":"classes/actor/functions/IsStateDelay.html#return","title":"Return","text":"<ol> <li>boolean - will return true if the delay is active.</li> </ol>"},{"location":"classes/actor/functions/IsStateDelay.html#example","title":"Example","text":"<ul> <li>SetStateDelay</li> </ul>"},{"location":"classes/actor/functions/RandomState.html","title":"RandomState","text":""},{"location":"classes/actor/functions/RandomState.html#server","title":"SERVER","text":"<pre><code>    ACTOR:RandomState()\n</code></pre>"},{"location":"classes/actor/functions/RandomState.html#description","title":"Description","text":"<p>Sets the random state of the actor, which are specified in the config settings.</p>"},{"location":"classes/actor/functions/RandomState.html#example","title":"Example","text":"<pre><code>    local actor = bgNPC:GetFirstActorInList()\n    actor:RandomState()\n</code></pre>"},{"location":"classes/actor/functions/ResetStateDelay.html","title":"ResetStateDelay","text":""},{"location":"classes/actor/functions/ResetStateDelay.html#server","title":"SERVER","text":"<pre><code>    ACTOR:ResetStateDelay()\n</code></pre>"},{"location":"classes/actor/functions/ResetStateDelay.html#description","title":"Description","text":"<p>Resets the delay.</p>"},{"location":"classes/actor/functions/ResetStateDelay.html#example","title":"Example","text":"<ul> <li>SetStateDelay</li> </ul>"},{"location":"classes/actor/functions/SetName.html","title":"SetName","text":""},{"location":"classes/actor/functions/SetName.html#server","title":"SERVER","text":"<pre><code>    ACTOR:SetName(string name)\n</code></pre>"},{"location":"classes/actor/functions/SetName.html#description","title":"Description","text":"<p>Sets the name of the actor (not the same as the name in the actor config!). It is set automatically using a random value from the config sh_names.lua.</p>"},{"location":"classes/actor/functions/SetName.html#arguments","title":"Arguments","text":"<ol> <li>name string - Actor name</li> </ol>"},{"location":"classes/actor/functions/SetReaction.html","title":"SetReaction","text":""},{"location":"classes/actor/functions/SetReaction.html#server","title":"SERVER","text":"<pre><code>    ACTOR:SetReaction(string reaction)\n</code></pre>"},{"location":"classes/actor/functions/SetReaction.html#description","title":"Description","text":"<p>Sets the reaction of the actor to the event. Used in system computing.</p>"},{"location":"classes/actor/functions/SetReaction.html#arguments","title":"Arguments","text":"<ol> <li>reaction string - Actor reaction on action.</li> </ol>"},{"location":"classes/actor/functions/SetReaction.html#example","title":"Example","text":"<p>Overrides reaction to a damage event. If the attacking player, and the NPC was going to defend, change the future state to \"fear\".</p> <pre><code>    hook.Add(\"BGN_PreReactionTakeDamage\", \"SetAnotherDamageReaction\", function(attacker, target, reaction)\n        local actor = bgNPC:GetActor(target)\n        if not actor then return end\n\n        if attacker:IsPlayer() and reaction == 'defense' then\n            actor:SetReaction('fear')\n        end\n    end)\n</code></pre>"},{"location":"classes/actor/functions/SetStateDelay.html","title":"SetStateDelay","text":""},{"location":"classes/actor/functions/SetStateDelay.html#server","title":"SERVER","text":"<pre><code>    ACTOR:SetStateDelay(number time)\n</code></pre>"},{"location":"classes/actor/functions/SetStateDelay.html#description","title":"Description","text":"<p>Sets the delay for state change. If there is a delay, then it is impossible to change the state before it expires.</p>"},{"location":"classes/actor/functions/SetStateDelay.html#arguments","title":"Arguments","text":"<ol> <li>time number - Delay time.</li> </ol>"},{"location":"classes/actor/functions/SetStateDelay.html#example","title":"Example","text":"<p>Attention! This is just an example. Lots of useless calls in every frame is detrimental to the game. It is recommended to use a perpetual timer with the desired delay.</p> <pre><code>    local list_of_states = { 'walk', 'run', 'idle' }\n    local past_state = nil\n    local duplicate_values = 0\n\n    hook.Add(\"Think\", \"SetActorTwoStatesDelay\", function()\n        local actor = bgNPC:GetFirstActorInList()\n        local next_state = table.RandomBySeq(list_of_states)\n\n        -- Set to random state on first call.\n        -- Subsequent calls will not randomize until the delay expires.\n        actor:SetState(next_state)\n\n        -- If the delay has expired or is not active, then set the delay to 3 seconds.\n        if not actor:IsStateDelay() then\n            actor:SetStateDelay(3)\n        end\n\n        -- If the same state is repeated more than 3 times, then the delay is reset.\n        if past_state == next_state then\n            if duplicate_values == 3 then\n                actor:ResetStateDelay()\n            else\n                duplicate_values = duplicate_values + 1\n            end\n        else\n            duplicate_values = 0\n        end\n\n        past_state = next_state\n    end)\n</code></pre>"},{"location":"classes/actor/functions/SyncFunction.html","title":"SyncFunction","text":""},{"location":"classes/actor/functions/SyncFunction.html#server","title":"SERVER","text":"<pre><code>    ACTOR:SyncFunction(string name, Player ply, table data)\n</code></pre>"},{"location":"classes/actor/functions/SyncFunction.html#description","title":"Description","text":"<p>This function is a system function and is used to synchronize data. A unique identifier of the actor and a data table are sent to the client as parameters.</p>"},{"location":"classes/actor/functions/SyncFunction.html#arguments","title":"Arguments","text":"<ol> <li>name string - The name of the network variable of the library \"SNet\", where the request should be sent.</li> <li>ply Player (Optional | Default: nil) - the player for which the data should be sent. If a player is not specified, then the data is sent to all players.</li> <li>data table - table with data to be sent to the network hook.</li> </ol>"},{"location":"classes/actor/functions/SyncFunction.html#example","title":"Example","text":"<p>In this example, the code is executed on the server and client. The synchronization function is called after the actor's state has changed, and as data we send the client the new state and the server time when it was set.</p> <pre><code>    if SERVER then\n        hook.Add('BGN_SetState', 'SendForClientNewStateSetTimeInfo', function(actor, state_name)\n            actor:SyncFunction('actor_get_new_state_time_set', nil, {\n                state_name = state_name,\n                time_set = RealTime()\n            })\n        end)\n    else\n        snet.RegisterCallback('actor_get_new_state_time_set', function(ply, uid, data)\n            local actor = bgNPC:GetActorByUid(uid)\n            if not actor then return end\n            print('The new state \"' .. data.state_name .. '\" was set at \"' .. data.time_set .. '\" time')\n        end)\n    end\n</code></pre>"},{"location":"information/More%20maps.html","title":"Default &amp; Unofficial maps","text":"<p>I have no plans to add support for a large number of cards, but you or others can do it yourself without much difficulty.</p>"},{"location":"information/More%20maps.html#maps-on-which-you-can-check-the-addon","title":"Maps on which you can check the addon:","text":"<ul> <li>gm_construct</li> <li>gm_bigcity</li> <li>gm_bigcity_improved</li> <li>gm_ploschadka</li> <li>RP_SouthSide</li> <li>RP_SouthSide_Day</li> <li>RP_Bangclaw</li> <li>gm_bigcity_sh</li> <li>gm_liminal_space</li> <li>rp_sheep_v3</li> <li>gm_neon_bigcity</li> <li>gm_stormwald</li> </ul>"},{"location":"information/More%20maps.html#unofficial-maps","title":"Unofficial maps:","text":"<ul> <li>Background Npcs | More Map Support! (unofficial)</li> <li>Background NPCs OnTheMatter Map Support</li> <li>gm_possum_springs</li> <li>Underground Construct</li> <li>Glass Houses</li> <li>Jazztronauts Mewseum</li> <li>Micro Construct</li> <li>gm_goldencity_v2</li> <li>rp_ACSRG2</li> <li>Random Background NPC Nodes pack</li> <li>gm_goldencity_v2_day</li> <li>gm_925</li> <li>Xanthys</li> </ul> <p>Do you want your work to be listed, or do you want to suggest a map? You can do this on a discord server.</p>"},{"location":"tutorials/Actor-Config-Settings.html","title":"Actor Configuration Options","text":""},{"location":"tutorials/Actor-Config-Settings.html#enabled","title":"enabled","text":"<ul> <li>boolean</li> <li>Whether the actor is enabled by default in the options menu or not. <pre><code>-- Yes\nenabled = true\n-- No\nenabled = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#class","title":"class","text":"<ul> <li>string | table</li> <li>NPC entity class. May be in the form of a string or a list of strings. <pre><code>-- string\nclass = 'npc_citizen'\n-- table\nclass = {\n    'npc_citizen',\n    'npc_metropolice'\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#name","title":"name","text":"<ul> <li>string</li> <li>The name of the actor, which is displayed in the options menu. <pre><code>-- string\nname = 'Amogus'\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#fullness","title":"fullness","text":"<ul> <li>number</li> <li>Percentage filling from 0 to 100. Used when changing the slider for the total number of NPCs on the map. <pre><code>-- number\n-- If the npc limit is 30, then it will be 50% of the number 30.\nfullness = 50\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#limit","title":"limit","text":"<ul> <li>number</li> <li>Sets a fixed number of NPCs to spawn by default. Attention: this parameter is not compatible with \"fullness\". But you can still change this slider individually. <pre><code>-- number\n-- When changing the slider for the total number of NPCs, the limit will always be at a value of - 5.\nlimit = 5\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#team","title":"team","text":"<ul> <li>table</li> <li>Team to which the actor belongs. Default teams: residents, police, bandits, zombies. <pre><code>-- table\n-- is in the team of citizens\nteam = { 'residents' }\n-- is a member of the citizen and police team\nteam = { 'residents', 'police' }\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#weapons","title":"weapons","text":"<ul> <li>table</li> <li>A weapon that an actor can spawn with. The weapon is not in the hands, it is \"in the pocket\". NPC takes (spawns) weapons if necessary. <pre><code>-- table\nweapons = { 'weapon_pistol' }\nweapons = { 'weapon_pistol', 'weapon_shotgun' }\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#getting_weapon_chance","title":"getting_weapon_chance","text":"<ul> <li>boolean | number</li> <li>The chance at which an NPC can get a weapon. If set to \"false\", the NPC will always take weapons. <pre><code>-- number\n-- 20% chance to pick up a weapon\ngetting_weapon_chance = 20\n-- boolean\n-- always take a weapon\ngetting_weapon_chance = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#money","title":"money","text":"<ul> <li>table | number</li> <li>How much money can an NPC throw away after death. Works if there are handlers and mods for money. You can specify a fixed or random amount. <pre><code>-- number\n-- Always throw away \"30\" money upon death.\nmoney = 30\n-- table\n-- Throw away a random amount of money from \"1\" to \"20\". If 0 falls out, then nothing will come of it.\nmoney = { 0, 20 }\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#health","title":"health","text":"<ul> <li>table | number</li> <li>How much health the npc can spawn with. You can specify a fixed or random number. <pre><code>-- number\n-- The NPC spawns with \"50\" health each time.\nhealth = 50\n-- table\n-- The NPC spawns with a random amount of health from \"30\" to \"100\".\nhealth = { 30, 100 }\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#weapon_skill","title":"weapon_skill","text":"<ul> <li>number | enum</li> <li>Sets weapon proficiency (Read More). <pre><code>-- number / enum\nweapon_skill = WEAPON_PROFICIENCY_POOR\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#replics","title":"replics","text":"<ul> <li>table</li> <li>Sets the lines to be spoken by NPCs in different states. <pre><code>-- No description yet\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#max_vehicle","title":"max_vehicle","text":"<ul> <li>number</li> <li>Sets the maximum number of vehicles to spawn. <pre><code>-- number\n-- Spawn a maximum of 2 cars for a given actor type.\nmax_vehicle = 2\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicle_multiply_speed","title":"vehicle_multiply_speed","text":"<ul> <li>table</li> <li>Sets the states in which the movement speed will be multiplied. <pre><code>-- No description yet\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#enter_to_exist_vehicle_chance","title":"enter_to_exist_vehicle_chance","text":"<ul> <li>number</li> <li>Chance for an existing or new actor to get into a transport on the map, instead of being removed or teleported. <pre><code>-- number\n-- 10% chance to board an existing vehicle on the map.\nenter_to_exist_vehicle_chance = 10\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicles_strict_color_chance","title":"vehicles_strict_color_chance","text":"<ul> <li>number</li> <li>Works if random colors (vehicles_random_color) are enabled. Sets limits on bright colors, making them less toxic. <pre><code>-- number\n-- 25% chance of setting a strict color.\nvehicles_strict_color_chance = 25\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicles_random_color","title":"vehicles_random_color","text":"<ul> <li>boolean</li> <li>Enable color randomization for vehicles. <pre><code>-- boolean\n-- Turn on random colors.\nvehicles_random_color = true\n-- boolean\n-- Turn off random colors.\nvehicles_random_color = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicles_random_skin","title":"vehicles_random_skin","text":"<ul> <li>boolean</li> <li>Switch of random skins for vehicles. <pre><code>-- boolean\n-- Enable random skins.\nvehicles_random_skin = true\n-- boolean\n-- Disable random skins.\nvehicles_random_skin = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicles_random_bodygroups","title":"vehicles_random_bodygroups","text":"<ul> <li>boolean</li> <li>Random bodygroup switcher for vehicles. <pre><code>-- boolean\n-- Enable random bodygroups.\nvehicles_random_bodygroups = true\n-- boolean\n-- Disable random bodygroups.\nvehicles_random_bodygroups = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicle_group","title":"vehicle_group","text":"<ul> <li>string</li> <li>Sets the primary group for this actor's car. <pre><code>-- string\n-- Allows only actors from the police group to get into the car\nvehicle_group = 'police'\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#vehicles","title":"vehicles","text":"<ul> <li>table</li> <li>A list of cars that can be created for this actor. All major vehicle bases must be supported. If there are problems with any base - let me know. <pre><code>-- table\n-- Sets the actor's vehicles list\nvehicles = {\n    'sim_fphys_pwavia',\n    'sim_fphys_pwgaz52',\n    'sim_fphys_pwhatchback',\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_random_range","title":"at_random_range","text":"<ul> <li>number</li> <li>Changes the ranking limits for choosing a random state value. It is recommended to use it to increase the spread if the calculations from 0 to 100 are not enough for you.. <pre><code>-- number\n-- Changes randomization settings from \"0 -## 100\" to \"0 -## 120\".\nat_random_range = 120\nat_random = {\n    ['walk'] = 75,\n    ['idle'] = 10,\n    ['dialogue'] = 15,\n    ['sit_to_chair'] = 10,\n    ['random_gesture'] = 10,\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_damage_range","title":"at_damage_range","text":"<ul> <li>number</li> <li>Similar actions as \"at_random_range\", but only for the field \"at_damage\".</li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_protect_range","title":"at_protect_range","text":"<ul> <li>number</li> <li>Similar actions as \"at_random_range\", but only for the field \"at_protect\".</li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_random","title":"at_random","text":"<ul> <li>table</li> <li>Actions that the actor will perform after a random period of time. <pre><code>-- 50% chance to walk, 50% chance to rest\nat_random = {\n    ['walk'] = 50,\n    ['idle'] = 50,\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_damage","title":"at_damage","text":"<ul> <li>table</li> <li>Actions that the actor will take if he is attacked.</li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#at_protect","title":"at_protect","text":"<ul> <li>table</li> <li>Actions an actor will take if his ally is attacked.</li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#respawn_delay","title":"respawn_delay","text":"<ul> <li>number</li> <li>Set the spawn delay in seconds from the moment the actor dies. <pre><code>-- The actor will spawn 5 seconds after death if the global spawn delay is less than this limit.\nrespawn_delay = 5\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#wanted_level","title":"wanted_level","text":"<ul> <li>number</li> <li>Relevant only in the case of an active module on the \"Wanted System\". Set the level at which NPCs can spawn (1 to 5) <pre><code>-- Compare actors only if wanted level - 3\nwanted_level = 3\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#disable_states","title":"disable_states","text":"<ul> <li>boolean</li> <li>Possibility to turn off Background NPCs state logic. This allows you to spawn NPCs on the map, but not change their original behavior. <pre><code>-- NPCs will not use the state system of their Background NPCs\ndisable_states = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#validator","title":"validator","text":"<ul> <li>function</li> <li>Checks the validity of the data before creating the actor. Can cancel the creation of the actor if it returns \"false\". <pre><code>-- @self - config data\n-- @npc_type - actor type/id\nvalidator = function(self, npc_type)\n    -- Cancels the creation of an actor if its class is not in the list of NPCs.\n    if list.Get('NPC')[self.class] == nil then\n        return false\n    end\nend,\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#inherit","title":"inherit","text":"<ul> <li>string</li> <li>Inherits data from another actor. Useful if you don't want to overwrite the same parameters all the time. <pre><code>-- For example, this is our main actor.\nbgNPC.cfg:SetActor('actor_1', {\n    enabled = true,\n    name = 'Actor 1',\n    class = 'npc_citizen',\n    fullness = 64,\n    team = { 'residents' },\n    health = 1000,\n    at_random = {\n        ['walk'] = 50,\n        ['idle'] = 50,\n    },\n    at_damage = { ['defense'] = 100 },\n    at_protect = { ['defense'] = 100 }\n})\n\n-- This actor uses the \"inherit\" parameter to borrow the missing parameters it takes from \"actor_1\"\nbgNPC.cfg:SetActor('actor_2', {\n    enabled = true,\n    name = 'Actor 2',\n    inherit = 'actor_1',\n    team = { 'bandits' },\n    at_protect = { ['fear'] = 100 },\n})\n\n-- This actor uses the \"inherit\" parameter to borrow missing parameters, which it takes from \"actor_2\", which previously borrowed data from \"actor_1\".\n-- But there is also a team parameter where we explicitly specify from which actor we want to borrow data.\n-- The \"@\" sign is used to indicate the actor from which we want to borrow a similar field.\nbgNPC.cfg:SetActor('actor_3', {\n    enabled = true,\n    name = 'Actor 3',\n    inherit = 'actor_2',\n    team = '@actor_1',\n    at_damage = { ['fear'] = 100 },\n    at_protect = { ['fear'] = 100 }\n})\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#random_skin","title":"random_skin","text":"<ul> <li>boolean</li> <li>Enables an option for NPCs to spawn with random skins. <pre><code>-- Enable random skins\nrandom_skin = true\n-- Disable random skins\nrandom_skin = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#random_bodygroups","title":"random_bodygroups","text":"<ul> <li>boolean</li> <li>Enables an option for NPCs to spawn with random bodygroups. <pre><code>-- Enable random bodygroups\nrandom_bodygroups = true\n-- Disable random bodygroups\nrandom_bodygroups = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#default_models","title":"default_models","text":"<ul> <li>boolean</li> <li>Enables or disables the use of standard NPC models. Useful if you use custom models. <pre><code>-- Enable default models\ndefault_models = true\n-- Disable default models\ndefault_models = false\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#models","title":"models","text":"<ul> <li>table</li> <li>Sets a list of custom npc models. <pre><code>models = {\n    'models/smalls_civilians/pack1/hoodie_male_01_f_npc.mdl',\n    'models/smalls_civilians/pack1/hoodie_male_02_f_npc.mdl',\n    'models/smalls_civilians/pack1/zipper_female_01_f_npc.mdl',\n    'models/smalls_civilians/pack1/zipper_female_02_f_npc.mdl',\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#relationship","title":"relationship","text":"<ul> <li>table</li> <li>Set values for relations that will be applied to the actor after spawning (Read More).  <pre><code>relationship = {\n    ['@player'] = D_HT, -- Hate the players\n    ['@actor'] = D_HT,  -- Hate other actors\n    ['@team'] = D_LI,   -- Befriend team members\n    ['@npc'] = D_NU,    -- Be neutral towards other NPCs\n}\n</code></pre></li> </ul>"},{"location":"tutorials/Actor-Config-Settings.html#bsmod_damage_animation_disable","title":"bsmod_damage_animation_disable","text":"<ul> <li>boolean</li> <li>Compatibility with BSmod addon. Prevents the addon from using animations on actors. <pre><code>-- Disable animations\nbsmod_damage_animation_disable = true\n-- Enable animations\nbsmod_damage_animation_disable = false\n</code></pre></li> </ul> <p>Not all options are presented in this article. Expect updates...</p>"},{"location":"tutorials/Change%20basic%20configuration.html","title":"Change basic configuration","text":""},{"location":"tutorials/Change%20basic%20configuration.html#how-to-add-or-change-npc-parameters","title":"How to add or change NPC parameters?","text":""},{"location":"tutorials/Change%20basic%20configuration.html#1-download-one-of-the-ready-made-examples","title":"1. Download one of the ready-made examples:","text":"<ul> <li>NPC model changing module</li> <li>Module adding more vehicles</li> </ul>"},{"location":"tutorials/Change%20basic%20configuration.html#2-place-the-example-in-the-game-folder","title":"2. Place the example in the game folder:","text":"<ul> <li>..\\GarrysMod\\garrysmod\\addons</li> </ul>"},{"location":"tutorials/Change%20basic%20configuration.html#3-change-the-name-of-the-files-and-folders-to-your-own-example","title":"3. Change the name of the files and folders to your own. Example:","text":"<ul> <li>bgn_my_custom_models\\lua\\background_npcs_core\\custom_modules\\config\\mynick_folder\\sh_my_custom_module.lua</li> </ul> <p>You can just put the file in the \"config\" folder, but then it is recommended to come up with a more unique file name:</p> <ul> <li>bgn_my_custom_models\\lua\\background_npcs_core\\custom_modules\\config\\sh_mynick_my_custom_module.lua</li> </ul>"},{"location":"tutorials/Change%20basic%20configuration.html#4-see-the-standard-config-for-orientation","title":"4. See the standard config for orientation:","text":"<p>sh_npcs.lua</p>"},{"location":"tutorials/Change%20basic%20configuration.html#5-add-your-parameters-to-your-lua-script-example","title":"5. Add your parameters to your lua script. Example:","text":"<pre><code>    -- Gets the config of the actor with the ID Key \"citizen\"\n    local citizen = bgNPC.cfg.actors['citizen']\n    -- Change or add parameters:\n    citizen.random_skin = true\n    citizen.random_bodygroups = true\n    citizen.models = {\n        'boba.mdl',\n    }\n</code></pre>"},{"location":"tutorials/Change%20basic%20configuration.html#6-if-youre-done-and-want-to-upload-the-configuration-to-the-workshop-use-any-of-these-tutorials","title":"6. If you're done and want to upload the configuration to the workshop, use any of these tutorials:","text":"<ul> <li>Workshop Addon Creation</li> <li>How to upload to Workshop [EASY]</li> <li>How to publish an addon to the Steam workshop</li> <li>GMod-Easy-Addon-Uploader</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GMA \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0432 WorkShop</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0434\u0434\u043e\u043d\u0430 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440\u0441\u043a\u0443\u044e \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0434\u0434\u043e\u043d\u0430 \u0432 WorkShop</li> </ul>"},{"location":"tutorials/Creating-Custom-NPCs.html","title":"Creating Custom NPCs","text":""},{"location":"tutorials/Creating-Custom-NPCs.html#1-preparing-the-workspace","title":"1. Preparing the workspace","text":"<p>If you want to create your own NPCs (Actors), you need to create a module using LUA scripts. You can't do it through the game, at least not now.</p>"},{"location":"tutorials/Creating-Custom-NPCs.html#11-go-to-the-games-addons-folder","title":"1.1. Go to the game's addons folder.","text":"<p>Example:</p> <p>C:\\SteamLibrary\\steamapps\\common\\GarrysMod\\garrysmod\\addons</p>"},{"location":"tutorials/Creating-Custom-NPCs.html#12-create-a-folder-where-your-future-module-will-be-it-is-recommended-to-name-the-folder-in-small-letters-no-spaces","title":"1.2. Create a folder where your future module will be. It is recommended to name the folder in small letters, no spaces!","text":"<p>Example:</p> <p>my_first_module</p> <p>In the end, you should end up with something like this:</p> <p>C:\\SteamLibrary\\steamapps\\common\\GarrysMod\\garrysmod\\addons\\my_first_module</p>"},{"location":"tutorials/Creating-Custom-NPCs.html#13-now-you-need-to-create-a-basic-folder-structure-for-the-addon-consider-the-simplest-structure","title":"1.3. Now you need to create a basic folder structure for the addon. Consider the simplest structure.","text":"<p>Example:</p> <pre><code>\ud83d\udce6my_first_module\n \u2517 \ud83d\udcc2lua\n \u2503 \u2517 \ud83d\udcc2background_npcs_core\n \u2503 \u2503 \u2517 \ud83d\udcc2custom_modules\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2config\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcsh_my_first_module_cfg.lua\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2postload\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcsh_my_first_module_postload.lua\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2preload\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcsh_my_first_module_preload.lua\n</code></pre> <p>Explanation:</p> <p>The names of the \".lua\" files are given as an example. It is recommended to give unique filenames and create additional directories to avoid possible mod conflicts.</p> <p>Let's get familiar with the folder structure. There are three main folders for modules:</p> <ul> <li>config - is loaded after the standard addon configuration files have been initialized. This is the right place to make changes to the configs.</li> <li>preload - loaded after \"config\", before loaded all main addon scripts. You can use this place to edit the cvars of the addon, or other things that need to be done before the starts main scripts.</li> <li>postload - loaded last, after all the main files have been loaded. You can use this space to add new hooks and states for actors.</li> </ul> <p>The file prefix is also important (files will not be loaded without prefix!):</p> <ul> <li>cl_ - loads the script only on the client side.</li> <li>sv_ - loads the script only on the server side.</li> <li>sh_ - loads the script for both sides. (Recommended to always use when setting up configs)</li> </ul> <p>Explanation:</p> <p>You don't have to create all the folders if you don't intend to use them.</p>"},{"location":"tutorials/Creating-Custom-NPCs.html#2-creating-an-actor","title":"2. Creating an actor","text":""},{"location":"tutorials/Creating-Custom-NPCs.html#21-lets-create-a-new-actor-in-the-file-which-is-located-in-the-config-section","title":"2.1. Let's create a new actor in the file, which is located in the \"config\" section.","text":"<p>Example:</p> <pre><code>\ud83d\udce6my_first_module\n \u2517 \ud83d\udcc2lua\n \u2503 \u2517 \ud83d\udcc2background_npcs_core\n \u2503 \u2503 \u2517 \ud83d\udcc2custom_modules\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2config\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcsh_yay_new_actor.lua\n</code></pre> <p>Put the following content inside the file:</p> <pre><code>bgNPC.cfg:SetActor('gigachad', {\n    enabled = true,\n    class = 'npc_citizen',\n    name = 'This Real Gigachad',\n    fullness = 64,\n    team = { 'residents' },\n    health = 1000,\n    at_random = {\n        ['walk'] = 50,\n        ['idle'] = 50,\n    },\n    at_damage = {\n        ['defense'] = 100\n    },\n    at_protect = {\n        ['defense'] = 100\n    }\n})\n</code></pre> <p>The \"bgNPC.cfg:SetActor\" function consists of 2 arguments: 1. ID - in this example, our ID will be: \"gigachad\" 2. Actor data - lua table</p> <p>Consider the options:</p> <ul> <li>enabled - whether the actor is enabled by default in the options menu or not (true / false)</li> <li>class - NPC entity class. May be in the form of a string or a list of strings (string / table)</li> <li>name - the name of the actor, which is displayed in the options menu (string)</li> <li>fullness - percentage filling from 0 to 100. Used when changing the slider for the total number of NPCs on the map (number)</li> <li>team - team to which the actor belongs (table)</li> <li>health - actor's starting health (number)</li> <li>at_random - actions that the actor will perform after a random period of time (table)</li> <li>at_damage - actions that the actor will take if he is attacked (table)</li> <li>at_protect - actions an actor will take if his ally is attacked (table)</li> </ul> <p>Now if you save the file and start the game, you will have a new actor. If you were in the game when the file was created, the game must be restarted!</p> <p>If you have already created an addon directory, then you do not need to restart the game. It will be enough for you to save the file again or re-enter the map if you have made changes to the config.</p>"},{"location":"tutorials/Creating-Custom-NPCs.html#22-lets-consider-in-detail-all-the-parameters-that-can-be-added-to-the-actor","title":"2.2. Let's consider in detail all the parameters that can be added to the actor:","text":"<p>Actor Configuration Options</p>"},{"location":"tutorials/Modification-of-Existing-NPCs.html","title":"Editing Actor Configuration","text":"<p>Sometimes it may be necessary to slightly change the parameters of the actors, rather than create new ones.</p> <p>To get started, check out this article to understand the steps: Creating Custom NPCs</p>"},{"location":"tutorials/Modification-of-Existing-NPCs.html#1-follow-the-steps-to-create-a-workspace","title":"1. Follow the steps to create a workspace.","text":"<p>These actions are described in the article on creating your own actors.</p>"},{"location":"tutorials/Modification-of-Existing-NPCs.html#2-code-preparation","title":"2. Code preparation.","text":"<p>Paste the following code into the configuration file:</p> <pre><code>bgNPC.cfg:EditActor('citizen', {\n    team = { 'player' },\n    at_damage = { ['defense'] = 100 },\n    at_protect = { ['defense'] = 100 }\n})\n</code></pre> <p>The \"EditActor\" function is very similar to the \"SetActor\", but there is one difference. It does not replace all the data, only the ones you have passed.</p> <p>In this example, we changed the following parameters:</p> <ul> <li>team</li> <li>at_damage</li> <li>at_protect</li> </ul>"}]}